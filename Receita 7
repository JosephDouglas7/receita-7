Feito com ajuda do copilot para correção de erros de copilação: https://copilot.microsoft.com/

import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:flutter_hooks/flutter_hooks.dart';
import 'dart:convert';

// Serviço de dados que carrega dados de cervejas, cafés e nações
class DataService {
  final ValueNotifier<List> tableStateNotifier = ValueNotifier([]);
  int itemSize = 5;

  void carregar(index) {
    print('carregar #1 - antes de carregar dados');
    if (index == 0) carregarCafes();
    else if (index == 1) carregarCervejas();
    else if (index == 2) carregarNacoes();
    print('carregar #2 - dados carregados');
  }

  Future<void> carregarCafes() async {
    var cafesUri = Uri(
      scheme: 'https',
      host: 'random-data-api.com',
      path: 'api/coffee/random_coffee',
      queryParameters: {'size': '$itemSize'},
    );
    var jsonString = await http.read(cafesUri);
    var cafesJson = jsonDecode(jsonString);
    tableStateNotifier.value = cafesJson;
  }

  Future<void> carregarCervejas() async {
    var beersUri = Uri(
      scheme: 'https',
      host: 'random-data-api.com',
      path: 'api/beer/random_beer',
      queryParameters: {'size': '$itemSize'},
    );
    var jsonString = await http.read(beersUri);
    var beersJson = jsonDecode(jsonString);
    tableStateNotifier.value = beersJson;
  }

  Future<void> carregarNacoes() async {
    var nationsUri = Uri(
      scheme: 'https',
      host: 'random-data-api.com',
      path: 'api/nation/random_nation',
      queryParameters: {'size': '$itemSize'},
    );
    var jsonString = await http.read(nationsUri);
    var nationsJson = jsonDecode(jsonString);
    tableStateNotifier.value = nationsJson;
  }
}

final dataService = DataService();

void main() {
  MyApp app = MyApp();
  runApp(app);
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      theme: ThemeData(primarySwatch: Colors.deepPurple),
      debugShowCheckedModeBanner: false,
      home: Scaffold(
        appBar: AppBar(
          title: const Text("Dicas"),
        ),
        body: Column(
          children: [
            DropdownButton<int>(
              value: dataService.itemSize,
              items: [5, 10, 15]
                  .map((value) => DropdownMenuItem<int>(
                        value: value,
                        child: Text('$value itens'),
                      ))
                  .toList(),
              onChanged: (newValue) {
                if (newValue != null) {
                  dataService.itemSize = newValue;
                }
              },
            ),
            Expanded(
              child: ValueListenableBuilder(
                valueListenable: dataService.tableStateNotifier,
                builder: (_, value, __) {
                  return DataTableWidget(
                    jsonObjects: value,
                    propertyNames: ["name", "style", "ibu"],
                    columnNames: ["Nome", "Estilo", "IBU"],
                  );
                },
              ),
            ),
          ],
        ),
        bottomNavigationBar: NewNavBar(itemSelectedCallback: dataService.carregar),
      ),
    );
  }
}

class NewNavBar extends HookWidget {
  final Function(int) _itemSelectedCallback;

  NewNavBar({required Function(int) itemSelectedCallback})
      : _itemSelectedCallback = itemSelectedCallback;

  @override
  Widget build(BuildContext context) {
    var state = useState(0);

    return BottomNavigationBar(
      onTap: (index) {
        state.value = index;
        _itemSelectedCallback(index);
      },
      currentIndex: state.value,
      items: const [
        BottomNavigationBarItem(
          label: "Cafés",
          icon: Icon(Icons.coffee_outlined),
        ),
        BottomNavigationBarItem(
          label: "Cervejas",
          icon: Icon(Icons.local_drink_outlined),
        ),
        BottomNavigationBarItem(
          label: "Nações",
          icon: Icon(Icons.flag_outlined),
        ),
      ],
    );
  }
}

class DataTableWidget extends StatelessWidget {
  final List jsonObjects;
  final List<String> columnNames;
  final List<String> propertyNames;

  DataTableWidget(
      {this.jsonObjects = const [],
      this.columnNames = const ["Nome", "Estilo", "IBU"],
      this.propertyNames = const ["name", "style", "ibu"]});

  @override
  Widget build(BuildContext context) {
    return DataTable(
      columns: columnNames
          .map((name) => DataColumn(
                label: Expanded(
                    child: Text(name, style: TextStyle(fontStyle: FontStyle.italic))),
              ))
          .toList(),
      rows: jsonObjects
          .map((obj) => DataRow(
                cells: propertyNames
                    .map((propName) => DataCell(Text(obj[propName])))
                    .toList(),
              ))
          .toList(),
    );
  }
}
